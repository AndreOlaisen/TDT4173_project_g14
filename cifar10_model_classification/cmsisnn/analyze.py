#!/usr/bin/env python3

import json
import pathlib
import argparse
import collections
import torch
import numpy as np
import matplotlib.pyplot as plt


def parse_int8_str(val, qformat=None):
    """
    Interpret hexadecimal string (e.g. '0x01') as a signed 8-bit integer value.
    Convert the parsed value to the given Q-format if qformat is specified.
    """
    signed = int.from_bytes(bytes([int(val, 16)]), "little", signed=True)
    if qformat is not None:
        return float((signed / 2**qformat.fbits))
    else:
        return signed


def activations_to_histogram(act_values):
    """
    Return histogram of the given act_values.
    act_values are assumed to be int8_t values in the range (-128, 127).
    """
    return np.histogram(act_values, bins=256, range=(-128, 127))


def plot_histogram(axes, hist, label, normalized=True):
    """
    Plot histogram using matplotlib.
    If normalized, the histogram is normalized before plotting.
    """
    if normalized:
        hist = hist / hist.sum()
        min_pct = hist[0] * 100.0
        max_pct = hist[-1] * 100.0
        zero_pct = hist[128] * 100.0
    else:
        hist_sum = hist.sum()
        min_pct = (hist[0] / hist_sum) * 100.0
        max_pct = (hist[-1] / hist_sum) * 100.0
        zero_pct = (hist[128] / hist_sum) * 100.0
    # text = f"Min: {min_pct:.2g}%, Max: {max_pct:.2g}%, Z: {zero_pct:.2g}%"
    axes.bar(list(range(-128, 127 + 1)), hist, width=1.0, label=label)
    props = dict(boxstyle='round', facecolor='gray', alpha=0.5)
    # axes.text(0.75, 0.90, text, transform=axes.transAxes, fontsize=10,
    #    verticalalignment='top', bbox=props)


def plot_activation_histograms(hists, show=True, save_path=None):
    """
    Plot histograms of layer activations obtained from CMSIS-NN implementation.
    """
    fig, axes = plt.subplots(len(hists), 1, sharex=True, tight_layout=True)
    for i, act in enumerate(hists):
        plot_histogram(axes[i], act["activations"], act["name"])
        axes[i].legend(loc="upper left")
    if show:
        plt.show()
    if save_path is not None:
        plt.savefig(save_path)


def load_activation_json(path, hist=False):
    """
    Load activation record from json generated by CMSIS-NN implementation. 
    """
    with open(path, "r") as f:
        activations = json.load(f)
    for obj in activations:
        obj["activations"] = [parse_int8_str(a) for a in obj["activations"]]
        if hist:
            obj["activations"], _ = activations_to_histogram(obj["activations"])
    return activations


def combine_activation_json(paths):
    """
    Load and merge activation records from json generated by CMSIS-NN implementation.
    """
    combined = load_activation_json(paths[0], hist=True)
    for p in paths[1:]:
        obj = load_activation_json(p, hist=True)
        for c, n in zip(combined, obj):
            c["activations"] = c["activations"] + n["activations"]
    return combined


def main():
    p = argparse.ArgumentParser()
    p.add_argument("activations", nargs="+")
    args = p.parse_args()
    arg_paths = [pathlib.Path(ap) for ap in args.activations]
    files = []
    for ap in arg_paths:
        if ap.is_dir():
            files.extend(list(x for x in ap.iterdir() if not x.is_dir()))
        else:
            files.append(ap)
    hists = combine_activation_json(files)
    plot_activation_histograms(hists)


if __name__ == "__main__":
    main()
